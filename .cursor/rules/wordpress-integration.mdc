---
description: WordPressテーマ統合ガイドラインとパターン
---

# WordPressテーマ統合ガイドライン

## WordPressコンテキスト

このデザインシステムは、スタンドアロンのReactアプリケーションではなく、WordPressテーマ統合のために構築されています。コンポーネントはWordPressテーマ内で動作し、WordPressサイトのスタイリングと機能を提供するように設計されています。

## テーマ統合パターン

### アセットエンキュー
デザインシステムはWordPress互換のアセットにコンパイルされます：
- JavaScript: `dist/bundle.js` → WordPressテーマエンキュー
- CSS: `dist/build.css` → WordPressテーマエンキュー
- 画像: `dist/img/` → WordPressテーマアセットディレクトリ

### ファイル構造統合
```
wordpress-theme/
├── packages/
│   └── katsumascore_design_system/  # このパッケージ
├── style.css                        # WordPressテーマスタイルシート
├── functions.php                    # テーマ関数
└── assets/                          # コンパイルされたアセット
    ├── css/
    ├── js/
    └── img/
```

## WordPressでのコンポーネント使用

### PHP統合
コンポーネントはWordPressテンプレートで使用するように設計されています：

```php
// WordPressテンプレートファイル内
<div class="c-button c-button--primary">
    <a href="<?php echo get_permalink(); ?>">
        <?php echo get_the_title(); ?>
    </a>
</div>
```

### SCSS統合
SCSSファイルはコンパイルされ、WordPressテーマに統合されます：

```php
// functions.php内
function enqueue_theme_styles() {
    wp_enqueue_style(
        'katsumascore-design-system',
        get_template_directory_uri() . '/packages/katsumascore_design_system/dist/build.css',
        array(),
        '1.0.0'
    );
}
add_action('wp_enqueue_scripts', 'enqueue_theme_styles');
```

## WordPress固有のコンポーネント

### 管理画面スタイル
場所: [src/admin/admin-common.css](mdc:src/admin/admin-common.css)
- WordPress管理画面インターフェーススタイリング
- カスタマイザースタイル
- テーマオプションスタイリング

### WordPressフック統合
TypeScriptモジュールはWordPressで動作するように設計されています：

```typescript
// 例: WordPress固有の機能
window.addEventListener('load', function () {
  // WordPress固有の初期化
  if (typeof wp !== 'undefined') {
    // WordPressが利用可能
  }
});
```

## アセット管理

### ビルドプロセス
1. PostCSSによるSCSSコンパイル
2. TypeScriptコンパイル
3. アセット最適化
4. WordPress互換出力

### コピースクリプト
参考: [copy_style.sh](mdc:copy_style.sh)
- コンパイルされたアセットをWordPressテーマにコピー
- 適切なファイル構造を維持
- WordPress互換性を確保

## WordPressテーマ要件

### テーマ構造
- WordPressテーマ標準に従う
- WordPressコーディング標準と互換
- WordPress用レスポンシブデザイン
- アクセシビリティ準拠

### ブラウザサポート
参考: [package.json](mdc:package.json) browserslist
- 日本市場をターゲット（日本で3%以上）
- IE 11を除外
- 最新1バージョンのモダンブラウザをサポート

## パフォーマンス考慮事項

### WordPress最適化
- HTTPリクエストを最小化
- WordPressキャッシュを使用
- WordPressパフォーマンスに最適化
- WordPressベストプラクティスに従う

### アセット読み込み
- クリティカルCSSをインラインで読み込み
- 非クリティカルJavaScriptを遅延読み込み
- WordPressアセット最適化を使用
- 適切なキャッシュを実装

## 開発ワークフロー

### ローカル開発
1. Storybookでコンポーネントを開発
2. WordPress統合をテスト
3. アセットをビルドしてコピー
4. WordPress環境でテスト

### 本番デプロイ
1. 最適化されたアセットをビルド
2. WordPressテーマにコピー
3. WordPress機能をテスト
4. 本番にデプロイ

## WordPress固有のパターン

### テンプレート統合
```php
// デザインシステムクラス付きWordPressテンプレート
<article class="c-post">
    <header class="c-post__header">
        <h1 class="c-heading c-heading--post">
            <?php the_title(); ?>
        </h1>
    </header>
    <div class="c-post__content">
        <?php the_content(); ?>
    </div>
</article>
```

### カスタマイザー統合
```php
// デザインシステム付きWordPressカスタマイザー
function customize_register($wp_customize) {
    $wp_customize->add_setting('primary_color', array(
        'default' => '#5c39f2',
        'sanitize_callback' => 'sanitize_hex_color',
    ));

    $wp_customize->add_control(new WP_Customize_Color_Control(
        $wp_customize,
        'primary_color',
        array(
            'label' => __('Primary Color', 'katsumascore'),
            'section' => 'colors',
        )
    ));
}
```

## アクセシビリティとWordPress

### WordPressアクセシビリティ標準
- WordPressアクセシビリティガイドラインに従う
- セマンティックHTMLを使用
- 適切なARIA属性を実装
- キーボードナビゲーションを確保

### デザインシステムアクセシビリティ
- コンポーネントはアクセシビリティを考慮して構築
- SCSSにはフォーカス状態を含む
- TypeScriptはキーボードイベントを処理
- Storybookにはアクセシビリティテストを含む

## WordPress統合のテスト

### ローカルテスト
- WordPress開発環境でテスト
- アセット読み込みを検証
- レスポンシブデザインをチェック
- WordPress機能をテスト

### 本番テスト
- ステージング環境でテスト
- パフォーマンスを検証
- ブラウザ互換性をチェック
- WordPress標準を検証

## メンテナンスとアップデート

### バージョン管理
- デザインシステムの変更を追跡
- WordPress互換性を維持
- 破壊的変更を文書化
- 移行ガイドを提供

### WordPressアップデート
- WordPressアップデートでテスト
- テーマ互換性を維持
- 依存関係を更新
- WordPress標準に従う

## ベストプラクティス

### コード品質
- WordPressコーディング標準に従う
- 適切なPHPドキュメントを使用
- 適切なエラーハンドリングを実装
- セキュリティベストプラクティスに従う

### パフォーマンス
- WordPressに最適化
- WordPressキャッシュを使用
- データベースクエリを最小化
- WordPressパフォーマンスガイドラインに従う

### ユーザーエクスペリエンス
- WordPressユーザーエクスペリエンスを維持
- WordPressデザインパターンに従う
- レスポンシブデザインを確保
- デバイスとブラウザでテスト
