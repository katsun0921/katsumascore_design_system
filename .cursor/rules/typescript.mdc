---
globs: *.ts,*.tsx
description: TypeScript開発ガイドラインとパターン
---

# TypeScript開発ガイドライン

## TypeScript設定

### 設定ファイル
参考: [tsconfig.json](mdc:tsconfig.json)

### 主要設定
- ターゲット: DOMライブラリ付きES5
- 厳密モード有効
- `@/` エイリアス用のパスマッピング
- Storybook用のJSX preserveモード

## 型定義

### Interface vs Type
- オブジェクト形状とコンポーネントプロパティには `interface` を使用
- ユニオン、プリミティブ、計算型には `type` を使用

### コンポーネントプロパティインターフェース
```tsx
interface ComponentProps {
  /**
   * プロパティの説明
   */
  propName?: type;
  /**
   * 必須プロパティの説明
   */
  requiredProp: type;
  /**
   * イベントハンドラー
   */
  onClick?: () => void;
  /**
   * 子コンテンツ
   */
  children: React.ReactNode;
}
```

### ユニオン型
```tsx
type Size = 'small' | 'medium' | 'large';
type Variant = 'primary' | 'secondary' | 'tertiary';
type Theme = 'light' | 'dark';
```

## インポート/エクスポートパターン

### インポート順序
1. ReactとReact関連のインポート
2. サードパーティライブラリのインポート
3. ローカルコンポーネントのインポート
4. 型のインポート
5. SCSSのインポート

### インポート構造の例
```tsx
import React from 'react';
import { ComponentStory, ComponentMeta } from '@storybook/react';
import { Button } from './Button';
import type { ButtonProps } from './Button.types';
import '@/scss/object/component/_button.scss';
```

### エクスポートパターン
```tsx
// コンポーネント用の名前付きエクスポート
export const Button = ({ ... }: ButtonProps) => { ... };

// メインコンポーネント用のデフォルトエクスポート
export default Button;

// 型のエクスポート
export type { ButtonProps };
```

## 型安全性

### 厳密な型付け
- 関数パラメータの型を常に定義
- 関数の適切な戻り値型を使用
- `any` 型を避ける - `unknown` または特定の型を使用
- 型アサーションは控えめに使用

### 型安全性の例
```tsx
// 良い例: 明示的な型付け
const handleClick = (event: React.MouseEvent<HTMLButtonElement>): void => {
  event.preventDefault();
  // クリック処理
};

// 良い例: ジェネリック型付け
const processData = <T>(data: T[]): T[] => {
  return data.filter(item => item !== null);
};

// 避けるべき例: Any型
const badFunction = (data: any) => { ... };
```

## ジェネリック型

### コンポーネントジェネリクス
```tsx
interface GenericProps<T> {
  data: T[];
  renderItem: (item: T) => React.ReactNode;
  keyExtractor: (item: T) => string;
}

const GenericComponent = <T>({
  data,
  renderItem,
  keyExtractor
}: GenericProps<T>) => {
  return (
    <div>
      {data.map(item => (
        <div key={keyExtractor(item)}>
          {renderItem(item)}
        </div>
      ))}
    </div>
  );
};
```

### Storybookジェネリクス
```tsx
import { ComponentStory, ComponentMeta } from '@storybook/react';

export default {
  title: 'Components/Button',
  component: Button,
} as ComponentMeta<typeof Button>;

const Template: ComponentStory<typeof Button> = (args) => <Button {...args} />;
```

## ユーティリティ型

### 一般的なユーティリティ型
```tsx
// オプショナルプロパティ用のPartial
type PartialButtonProps = Partial<ButtonProps>;

// 特定のプロパティを選択するPick
type ButtonSize = Pick<ButtonProps, 'size'>;

// プロパティを除外するOmit
type ButtonWithoutSize = Omit<ButtonProps, 'size'>;

// キー値ペア用のRecord
type ColorMap = Record<string, string>;
```

## イベント処理

### イベント型
```tsx
// マウスイベント
const handleMouseClick = (event: React.MouseEvent<HTMLButtonElement>) => {
  // クリック処理
};

// フォームイベント
const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
  event.preventDefault();
  // フォーム送信処理
};

// 変更イベント
const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  const value = event.target.value;
  // 変更処理
};
```

## モジュール宣言

### グローバル型宣言
参考: [index.d.ts](mdc:index.d.ts)

```tsx
// グローバル型宣言
declare global {
  interface Window {
    customProperty: string;
  }
}

// モジュール宣言
declare module '*.scss' {
  const content: { [className: string]: string };
  export default content;
}
```

## パスマッピング

### エイリアス設定
- `@/*` は `src/*` にマッピング
- `@/scss/*` は `src/scss/*` にマッピング
- `@/assets/*` は `src/assets/*` にマッピング

### 使用例
```tsx
import { Button } from '@/stories/components/Button/Button';
import '@/scss/object/component/_button.scss';
import logo from '@/assets/images/logo.png';
```

## エラーハンドリング

### 型ガード
```tsx
const isString = (value: unknown): value is string => {
  return typeof value === 'string';
};

const processValue = (value: unknown) => {
  if (isString(value)) {
    // TypeScriptはここでvalueがstringであることを認識
    return value.toUpperCase();
  }
  return '';
};
```

### オプショナルチェーニング
```tsx
const user = {
  profile?: {
    name?: string;
    email?: string;
  };
};

// オプショナルチェーニングで安全にアクセス
const userName = user.profile?.name ?? 'Unknown';
const userEmail = user.profile?.email ?? 'No email';
```

## パフォーマンス考慮事項

### 型のみのインポート
```tsx
import type { ComponentProps } from 'react';
import type { ButtonProps } from './Button.types';
```

### 遅延読み込み型
```tsx
// 大きな型定義用
type LargeType = Awaited<ReturnType<typeof import('./large-module').getLargeData>>;
```

## 参考例

### コンポーネント例
- Button: [src/stories/components/Button/Button.tsx](mdc:src/stories/components/Button/Button.tsx)
- Heading: [src/stories/components/Heading/Heading.tsx](mdc:src/stories/components/Heading/Heading.tsx)

### TypeScriptモジュール
- Hamburger Menu: [src/ts/hamburgerMenu/hamburgerMenu.ts](mdc:src/ts/hamburgerMenu/hamburgerMenu.ts)
- Navigation: [src/ts/navigation/index.ts](mdc:src/ts/navigation/index.ts)
