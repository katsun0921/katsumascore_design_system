---
globs: *.scss,*.sass
description: SCSSスタイリングガイドラインとITCSSアーキテクチャパターン
---

# SCSSスタイリングガイドライン

## ITCSSアーキテクチャ

整理された、スケーラブルなスタイルシートのためにITCSS（Inverted Triangle CSS）手法に従ってください。

### レイヤー順序（インポート順序）
1. **Foundation** - [src/scss/foundation/](mdc:src/scss/foundation/)
2. **Global** - [src/scss/global/](mdc:src/scss/global/)
3. **Layout** - [src/scss/layout/](mdc:src/scss/layout/)
4. **Object** - [src/scss/object/](mdc:src/scss/object/)
5. **Inc** - [src/scss/inc/](mdc:src/scss/inc/)
6. **Plugins** - [src/scss/plugins/](mdc:src/scss/plugins/)

## SCSSベストプラクティス

### インポート文
- 変数とミックスインを上部でインポート
- パスエイリアスを使用: `@use '../../global/variable/colors' as color;`

### SCSS構造の例
```scss
@use '../../global/variable/colors' as color;
@use '../../global/variable/fontWeight' as fontWeight;
@use '../../global/mixin/transition';

.c-component {
  // ベーススタイル

  &__element {
    // エレメントスタイル
  }

  &--modifier {
    // モディファイアスタイル
  }

  &:hover {
    // 疑似クラススタイル
  }
}
```

## BEM命名規則

### クラス命名
- **Block**: `.c-button`（コンポーネント）
- **Element**: `.c-button__label`（コンポーネントの一部）
- **Modifier**: `.c-button--primary`（コンポーネントのバリエーション）

### 例
```scss
.c-button {
  // ベースボタンスタイル

  &__label {
    // ボタンラベルスタイル
  }

  &--primary {
    // プライマリボタンバリエーション
  }

  &--large {
    // ラージボタンバリエーション
  }
}
```

## 変数使用

### カラー変数
参考: [src/scss/global/variable/_colors.scss](mdc:src/scss/global/variable/_colors.scss)

```scss
@use '../../global/variable/colors' as color;

.element {
  background-color: color.$primary;
  color: color.$white;
  border-color: color.$gray300;
}
```

### フォントウェイト変数
参考: [src/scss/global/variable/_fontWeight.scss](mdc:src/scss/global/variable/_fontWeight.scss)

## ミックスイン使用

### トランジションミックスイン
参考: [src/scss/global/mixin/_transition.scss](mdc:src/scss/global/mixin/_transition.scss)

```scss
@use '../../global/mixin/transition';

.element {
  @include all-transition;
  // または特定のトランジション
  @include transition(background-color, 0.3s, ease);
}
```

### フォントサイズミックスイン
参考: [src/scss/global/mixin/_fontSize.scss](mdc:src/scss/global/mixin/_fontSize.scss)

## レスポンシブデザイン

### モバイルファーストアプローチ
- 最初にモバイルスタイルを記述
- 大きな画面にはmin-widthメディアクエリを使用
- 参考: [src/scss/global/mixin/_screens.scss](mdc:src/scss/global/mixin/_screens.scss)

```scss
.element {
  // モバイルスタイル（デフォルト）
  font-size: 14px;

  @media (min-width: 768px) {
    // タブレットスタイル
    font-size: 16px;
  }

  @media (min-width: 1024px) {
    // デスクトップスタイル
    font-size: 18px;
  }
}
```

## ファイル組織

### コンポーネントSCSSファイル
- 場所: [src/scss/object/component/](mdc:src/scss/object/component/)
- 命名: `_component-name.scss`
- コンポーネントインデックスでインポート: [src/scss/object/component/index.scss](mdc:src/scss/object/component/index.scss)

### ユーティリティSCSSファイル
- 場所: [src/scss/object/utility/](mdc:src/scss/object/utility/)
- 命名: `_utility-name.scss`
- ユーティリティインデックスでインポート: [src/scss/object/utility/index.scss](mdc:src/scss/object/utility/index.scss)

## パフォーマンス考慮事項

### 最適化
- ネストの深さを最小化（最大3-4レベル）
- 繰り返しパターンにミックスインを使用
- コメントで関連スタイルをグループ化

### 最適化されたSCSSの例
```scss
// コンポーネント: Button
@use '../../global/variable/colors' as color;
@use '../../global/mixin/transition';

.c-button {
  // ベーススタイル
  display: inline-block;
  padding: 12px 24px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  @include all-transition;

  // バリエーション
  &--primary {
    background-color: color.$primary;
    color: color.$white;

    &:hover {
      background-color: color.$primaryHover;
    }
  }

  &--secondary {
    background-color: transparent;
    color: color.$primary;
    border: 1px solid color.$primary;
  }
}
```
